snippet php
	<?php

	${1}

	?>
snippet ee
	<?==${1}?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
snippet vd
	echo "<pre>";
	var_dump($${1:variable});
	echo "</pre>";
	die( 'Break point : '.__METHOD__.' on line '.__LINE__ );
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/

	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}

snippet ctrl
	<?php
	/**
	* ${1:Admin_LayouController}
	*
	* @uses ${2:AdminInitController}
	* @package
	* @version 1.0
	* @author vs@webdirect.md
	*/
	class $1 extends $2
	{
		/**
		* init
		*
		* @access public
		* @author vs@webdirect.md
		* @return void
		*/
		public function init()
		{
			parent::init();
			${3}
		}

		/**
		* indexAction
		*
		* @author vs@webdirect.md
		* @return void
		*/
		public function indexAction()
		{
			${4}
		}

		/**
		* showItemWidget
		*
		* @author vs@webdirect.md
		* @return void
		*/
		public function showItemWidget()
		{
			${4}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
# Tertiary conditional
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}){
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}){
		${3:// code...}
	}
snippet prf
	${1:protected }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
snippet psf
	publi static function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
snippet prsf
	protected static function ${1:FunctionName}(${2})
	{
		${3:// code...}
	}
snippet pf
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)
snippet arr
	$${1:arrayName} = array('${2}' => ${3});${4}

#-------------- Smarty & Adodb snippets ----

snippet fs
	Factory::getSmarty();
snippet fsa
	Factory::getSmarty()->assign( '${1}' , $${2} );
snippet sas
	Factory::getSmarty()->assign( '${1}' , $${2} );
snippet fsf
	Factory::getSmarty()->fetch( '${1}' );
snippet fsd
	Factory::getSmarty()->display( '${1}' );
snippet fao
	Factory::getADO()->getOne( 'SELECT ${1} FROM ${2}' );
snippet far
	Factory::getADO()->getRow( 'SELECT ${1} FROM ${2}' );
snippet faq
	Factory::getADO()->qstr($${1})
snippet fai
	return Factory::getADO()->insert_ID();
snippet faa
	Factory::getADO()->getAll( 'SELECT
									${1}
								FROM
									${2}' );
snippet faaf
	Factory::getADO()->_affectedRows();
snippet fae
	Factory::getADO()->Execute( '${1}' );
snippet fajr
	Factory::getAjaxResponse();
snippet fgs
	Factory::getSession()->${1};
snippet fajra
	Factory::getAjaxResponse()->addAssign(${1}, ${2},${3});
snippet aassign
	Factory::getAjaxResponse()->addAssign(${1}, ${2},${3});
snippet fara
	return Factory::getAjaxResponse()->addAlert(print_r($${1},true));
snippet fc
	$this->fetchContent( '${1}' );
snippet fad
	Factory::getAdo()->debug = true;
snippet faf
	Factory::getAdo()->debug = false;
snippet dev
	if(getenv('REMOTE_ADDR') == '${89.28.84.116}' || getenv('REMOTE_ADDR') == '89.28.80.80'){
		${1}
	}
snippet ob
	ob_start();
	 print_r(${1});
	 $msg = ob_get_contents();
	file_put_contents('../tmp/logs/log', $msg);
	ob_end_clean();
snippet die
	die( 'Break point : '.__METHOD__.' on line '.__LINE__ );
# ---------------------------  Zend framework snippets	-----------------------
snippet sall
	/*
	Example
	$select = new Zend_Db_Select($this->getAdapter());
	$select->from( 'customer' );
	$select->joinLeft(array('ord'=>'order'), 'ord.order_customer_id = customer.customer_id', array( 'ord.order_id'));
	$select->joinLeft(array('ordr'=>'order_row'), 'ordr.order_id = ord.order_id', array('order_row_domain'));
	$result = $select->query()->fetchAll();
	//echo $select->__toString();
	return $result;
	*/
	$select = new Zend_Db_Select($this->getAdapter());
	$select->from( '${1}' );
	->joinLeft( array('${2:joined_table_alias}' => '${3:joined_table_name}'), '${4:$2}.${5:field} = ${6:$1}.${7:field}', array( '${8:$2}.${9:fetch_field}', '${10:$2}.${11:fetch_field}'))
	->joinLeft( array( '${11:joined_table_alias}' => '${11:joined_table_name}'), '${12:$11}.${13:field} = ${13:linked_table}.${14:field}', '*' );
	$select->where( ${15:$1}.'.${16:field} = '.$${17:filter_field} );
	$result = $select->query()->fetchAll();
	return $result;

snippet where
	->where('o.order_row_ignored_for_invoice IS NULL AND c.customer_ignored_for_invoice IS NULL');
snippet limit
		->limit(30, 0);

snippet	save ZF simple save method
	public function save($${1:input})
	{
		// get an instance of the registry and retrieve database object from it
		$db = $this->getAdapter();
		// prepare data for insertion
		$data = array(
						'${2:field1}' => $${3:input}['${4}'],
				);
		$db->insert('order', $data);
		$id = $db->lastInsertId();
		return $id;
	}

snippet	sav
	public function save($${1:input})
	{
		// get an instance of the registry and retrieve database object from it
		$db = $this->getAdapter();
		// prepare data for insertion
		$data = array(
						'${2:field1}' => $${3:input}['${4}'],
				);
		$db->insert('order', $data);
		$id = $db->lastInsertId();
		return $id;
	}

snippet zupdate simple ZF update
	public function update($input, $${1:id})
	{
		// get an instance of the registry and retrieve database object from it
		$db = $this->getAdapter();
		return $db->update('${2:table_name}', $input, $db->quoteInto('${3:field} = ?',$${4:id}));
	}


snippet edit Sly's edit action
	$id = $this->getRequest()->getParam('id');
	if(!empty($id)) {
		$${1:emailTemplateModel} = new ${2:Email_Model_Templates}();
		$$1Mapper = $$1->getTemplate($id);
		$this->view->title = $this->view->translate('${3:email_template}') . ' &laquo' . $$1Mapper->subject .'&raquo;';
	} else {
		$$1Mapper = new Page_Model_Mapper_Page();
		$this->view->title = $this->view->translate('${4:new_email_template}');
	}

	$form = new ${4:Email_Form_TemplateEdit}();
	$form->populate($$1Mapper->toArray());

	if ( $this->getRequest()->isPost() ) {
		if ( $form->isValid( $this->getRequest()->getPost() ) ) {
			$$1Mapper->fromArray($form->getValues());
			$$1Mapper->save();

			$this->_helper->getHelper('FlashMessenger')->addMessage('save_ok');
			$this->_helper->redirector->goToRoute(array(
														'module' => '${5:email}',
														'action' => '${6:template-list}',
													), 'admin', true);
		}
	}

	$this->view->form = $form;

snippet delete Sly's delete action
	$${1:Modelname}Model = new ${2:ModuleName}_Model_${3:ModelPath}();
	$item = $$1Model->getItem(
					$this->getRequest()->getParam('id'), true);

	$form = $$1Model->getEditForm($item);
	if ($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getParams())) {
		try{
			$$1Model->saveItem($theme, $form->getValues());
		}catch(Exception $exception) {
			$this->_helper->getHelper('FlashMessenger')
					->addMessage($exception->getMessage());
		}

		$this->_helper->getHelper('FlashMessenger')
				->addMessage('Item saved successfully.');
		$this->_redirect($this->_helper->url('${4:moduleurl}'));
	}
	$this->view->editThemeForm = $form;

snippet opt Sly's get config option
	$options = Zend_Controller_Front::getInstance()
		->getParam("bootstrap")
		->getOption('${1:youroption}');

snippet front
	Zend_Controller_Front::getInstance();

snippet fm
	Zend_Controller_Front::getInstance()->getDefaultModule();

snippet opt Zend's get config option
	$options = $this->getInvokeArg('bootstrap')->getOptions();

snippet sl	Sly's log
	Slys_Log::log('${1:Error occured}', Zend_Log::ERR);

snippet slog  Sly's log
	Slys_Log::log('${1:Error occured}', Zend_Log::ERR);

snippet qw
	$this->getAdapter()->quote('${1}');

snippet q
	$this->getRequest()->getParam('${1:id}');
	${2}
snippet fa
	/*
	Example
	$select = new Zend_Db_Select($this->getAdapter());
	$select->from( 'customer' );
	$select->joinLeft(array('ord'=>'order'), 'ord.order_customer_id = customer.customer_id', array( 'ord.order_id'));
	$select->joinLeft(array('ordr'=>'order_row'), 'ordr.order_id = ord.order_id', array('order_row_domain'));
	$result = $select->query()->fetchAll();
	return $result;
	*/
	$select = new Zend_Db_Select($this->getAdapter());
	$select->from( '${1}' );
	->joinLeft( array('${2:joined_table_alias}' => '${3:joined_table_name}'), '${4:$2}.${5:field} = ${6:$1}.${7:field}', array( '${8:$2}.${9:fetch_field}', '${10:$2}.${11:fetch_field}'))
	->joinLeft( array( '${11:joined_table_alias}' => '${11:joined_table_name}'), '${12:$11}.${13:field} = ${13:linked_table}.${14:field}', '*' );
	$select->where( ${15:$1}.'.${16:field} = '.$${17:filter_field} );
	$result = $select->query()->fetchAll();
	return $result;
snippet fall
	/*
	Example
	$select = new Zend_Db_Select($this->getAdapter());
	$select->from( 'customer' );
	$select->joinLeft(array('ord'=>'order'), 'ord.order_customer_id = customer.customer_id', array( 'ord.order_id'));
	$select->joinLeft(array('ordr'=>'order_row'), 'ordr.order_id = ord.order_id', array('order_row_domain'));
	$result = $select->query()->fetchAll();
	//echo $select->__toString();
	return $result;
	*/
	if(empty($filter->offset)){
		$filter->offset = 0;
	}
	if(empty($filter->limit)){
		$filter->limit = 30;
	}
	$select = $this->getAdapter()->select()
		->from(array($this->_name))
		->order('id DESC')
		->limit($filter->limit, $filter->offset);
	$result = $select->query()->fetchAll();
	return $result;
	themes

snippet list Sly's list action
	public function listAction()
	{
		$${1:Modelname}Model = new ${2:Module}_Model_${3:ModelFileName}();
		$this->view->pager = $$1Model->get$3Pager(
				$this->getRequest()->getParam('page', 1),
				$this->getRequest()->getParam('perPage', 20)
				);
	}
snippet list simple Zend_DB list method
	public function getList($filter)
	{
		if(empty($filter->offset)){
			$filter->offset = 0;
		}
		if(empty($filter->limit)){
			$filter->limit = 30;
		}
		$select = $this->getAdapter()->select()
			->from(array($this->_name))
			->order('id DESC')
			->limit($filter->limit, $filter->offset);
		$result = $select->query()->fetchAll();
		return $result;
	}


snippet d1one models/Model.php model DQL query get one
	return {$1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findOneBy('id', $id);

snippet d1one models/DbTable/Model.php model DQL query get one
	return ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findOneBy('id', $id);

snippet d1by
	$list = ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findBy('${3:field}', '${4:active:1}');

snippet d1find
	$list = ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findBy('${3:field}', '${4:active:1}');

snippet d1all DbTable DQL get list query
	public function getList()
	{
		return Doctrine_Query::create()
			->select('${1:table_alias}.*')
			->from('${2:ModuleName}_Model_Mapper_${3:ModelFileName} $1')
			->execute();
	}

snippet d1all models/Model.php get list using DbTable
	$mapper = ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findAll();

snippet d1one models/DbTable/Model.php model DQL query get one
	public function findOneById($id)
	{
		return Doctrine_Query::create()
			->from('Product_Model_Mapper_Product p')
			->leftJoin('p.Images')
			->where('id = ?', $id)
			->fetchOne();
	}

snippet d1one models/Model.php get one using DbTable
	$mapper = ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findOneById($id);

snippet d1fone models/Model.php get one using DbTable
	$mapper = ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()->findOneById($id);

snippet d1list models/DbTable/Model.php model DQL query get list
	public function getList()
	{
		return Doctrine_Query::create()
			->select('${1:table_alias}.*')
			->from('${2:ModuleName}_Model_Mapper_${3:ModelFileName} $1')
			->execute();
	}
snippet d1filter models/DbTable/Model.php model DQL query get list
	$rs = ${1:ModuleName}_Model_DbTable_${2:ModelFileName}::getInstance()
		->findByDql('related_id = ? AND name = ?',
				array($theme->id, $name));
	if ($exist->count() == 0) {
	}

snippet d1pager
	public function getPager($page = 1, $maxPerPage = 20, $where = array())
	{
		$query = Doctrine_Query::create()
			->select('${1:table_alias1}.*, ${2:table_alias2}.*')
			->from('${3:ModuleName}_Model_Mapper_${4:ModelFileName} $1')
			->leftJoin('$1.${5:AnotherModelFileName} $2');

		if (!empty($where) && is_array($where))
			foreach ($where as $field => $value) {
				$query->addWhere("$1.{$field} = ? ", array($value));
			}
		return new Doctrine_Pager($query, $page, $maxPerPage);
	}

snippet d1join Sly's DQL join
	public function getListByName($name)
	{
		return Doctrine_Query::create()
			->select('${1:table_alias1}.*, ${2:table_alias2}.*')
			->from('${3:ModuleName}_Model_Mapper_${4:ModelFileName} $1')
			->leftJoin('$1.${5:AnotherModelFileName} $2')
			->addWhere('$1.name = ?', array($name))
			->addOrderBy('$2.ordering')
			->fetchOne();
	}

snippet zfo
		$select = new Zend_Db_Select($this->getAdapter());
		$select->from( $this->_name );
		$select->where( $this->_primary.'=?',$id);
		//echo $select->__toString();
		return $select->query()->fetch();
		//echo $select->assemble();
snippet zfone Zend_Db_Select get one
		$select = new Zend_Db_Select($this->getAdapter());
		$select->from( $this->_name );
		$select->where( $this->_primary.'=?',$id);
		//echo $select->__toString();
		return $select->query()->fetch();
		//echo $select->assemble();
snippet sone
		$select = new Zend_Db_Select($this->getAdapter());
		$select->from( $this->_name );
		$select->where( $this->_primary.'=?',$id);
		//echo $select->__toString();
		return $select->query()->fetch();
		//echo $select->assemble();

snippet sconf Sly's get config option
	$options = Zend_Controller_Front::getInstance()
		->getParam("bootstrap")
		->getOption('${1:youroption}');

snippet conf Zend's get config option
	$options = $this->getInvokeArg('bootstrap')->getOptions();

snippet zrg
	Zend_Registry::get('${1:configuration}')
snippet zrs
	Zend_Registry::set('${1:name}', $${2});
snippet par
	$input = $this->getRequest()->getParams();
snippet i $input = $this->getRequest()->getParams();
	$input = $this->getRequest()->getParams();
snippet inp
	$input = $this->getRequest()->getParams();
snippet p
	$${1:"input"}  = $this->getRequest()->getParam($1);
snippet id
	$id  = $this->getRequest()->getParam('id');
snippet isx
	if( $this->getRequest()->isXmlHttpRequest() ){
		${1://code}
	}
snippet isajax
	if( $this->getRequest()->isXmlHttpRequest() ){
		${1://code}
	}
snippet xhttp
	if( $this->getRequest()->isXmlHttpRequest() ){
		${1://code}
	}

snippet zsess
	$${1:session} = new Zend_Session_Namespace('${2}');
snippet sess
	$${1:session} = new Zend_Session_Namespace('${2}');
snippet va
	$this->view->assign('${1:var}', $${2:value});
snippet as
	$this->view->assign('${1:var}', $${2:value});
snippet nor
	$this->getHelper('viewRenderer')->setNoRender(true);
snippet nol
	$this->_helper->layout->disableLayout();
snippet zren
	$this->view->render( '${1:template.tpl}');
snippet vr
	$this->view->render( '${1:template.tpl}');
snippet fr
	$this->form->render();
snippet req
	$this->getRequest()->getParam('${1}');
snippet reg
	Zend_Registry::get('${1}')
snippet zr
	Zend_Registry::get('${1}')
snippet rgp
	$this->_request->getParam('${1}');
snippet vha
	$this->view->headScript()->appendFile( $this->view->baseUrl() . 'javascript/${1}.js' );
snippet zf
		$form = new Zend_Form();
		$form->setAction('${1:/admin/layout/saveparams/'})
				->setMethod('post')
				->setAttrib('id', '${2:param_form}');
		$${3:params} = new Zend_Form_Element_Text("${4:param}");
		$3->setAttrib('id', '$4');
		$param_type = new Zend_Form_Element_Select("param_type");
		$param_type->addMultiOption( '', '---');
		foreach ($this->param_types as $pt=>$desc){
			$param_type->addMultiOption( $pt, $desc);
		}
		$submit = new Zend_Form_Element_Submit('submit');
		$submit->setLabel($this->translate('Save'));
		$param_type->setLabel($this->translate('Action Parameters'));
		$param_type->setAttrib('id', 'param_type');
		$form->addElement($param_type);
		$form->addElement($params);
		$form->addElement($submit);
		return $form;
snippet zform
		$form = new Zend_Form();
		$form->setAction('/admin/layout/saveparams/')
				->setMethod('post')
				->setAttrib('id', 'param_form');
		$params = new Zend_Form_Element_Text("param");
		$params->setAttrib('id', 'param');
		$param_type = new Zend_Form_Element_Select("param_type");
		$param_type->addMultiOption( '', '---');
		foreach ($this->param_types as $pt=>$desc){
			$param_type->addMultiOption( $pt, $desc);
		}
		$submit = new Zend_Form_Element_Submit('submit');
		$submit->setLabel($this->translate('Save'));
		$param_type->setLabel($this->translate('Action Parameters'));
		$param_type->setAttrib('id', 'param_type');
		$form->addElement($param_type);
		$form->addElement($params);
		return $form;
snippet form Zend_Form init()
	<?php
	class ${1:ModuleName}_Form_${2:FormFileName} extends Zend_Form
	{
		public function init()
		{
			$this->setMethod(self::METHOD_POST);
			//$this->setEnctype(self::ENCTYPE_MULTIPART);
			//$this->setAction('/${3:module}/${4:ctrl}/${5:act}/');
			//elements begin here
			${6}
		}
	}

snippet zft
	$lengthValidator = new Zend_Validate_StringLength();
	$lengthValidator->setMax(255);

	//$sysnameRegexValidator = new Zend_Validate_Regex('/^([0-9a-z\_\-]+)$/');
	//$sysnameRegexValidator->setMessage('invalid_sysname_error_message', Zend_Validate_Regex::NOT_MATCH);

	$${1:element} = new Zend_Form_Element_Text('$1');
	$$1->setLabel('$1');
	$$1->setAllowEmpty(false);
	$$1->setRequired();
	//$$1->addValidator('Int');
	$$1->addValidator($lengthValidator);
	//$$1->addValidator($sysnameRegexValidator);
	$$1->setAttrib('maxlength', 255);
	$this->addElement($$1);

snippet zfh
	$${1:element} = new Zend_Form_Element_Hidden('$1');
	$$1->getDecorator('Description')->setEscape(false);
	$this->addElement($$1);

snippet zff
	$file = new Zend_Form_Element_File('image');
	$file->setLabel('image');
	$file->addValidator('Count', false, 1);
	$file->addValidator('Size', false, 0.5 * 1024 * 1024); //0.5MiB
	$file->addValidator('Extension', false, 'jpg,png,gif');
	$file->setDestination(ROOT_PATH . '/tmp/');
	$this->addElement($file);

snippet zfta
	$${1:element} = new Zend_Form_Element_Textarea('$1');
	$$1->setLabel('$1');
	$$1->setRequired(false);
	$this->addElement($$1);

snippet zfs
	$save = new Zend_Form_Element_Submit('save');
	$save->setLabel('save');
	$this->addElement($save);


snippet zfse
	$${1:type} = new Zend_Form_Element_Select('$1');
	$$1->setLabel('product_type');
	$$1->setRequired();
	$typesList = Product_Model_DbTable_Product::getInstance()->getTypesList();
	$type->addMultiOptions($typesList);
	$this->addElement($type);

snippet zfr
	$${1:element} = new Zend_Form_Element_Radio('$1');
	$$1->setLabel('$1');
	$$1->setAllowEmpty(false);
	$$1->addMultiOption("1", $this->getView()->translate('yes'));
	$$1->addMultiOption("0", $this->getView()->translate('no'));
	$$1->setValue(false);
	$this->addElement($$1);

snippet fe
	$this->addElement( '${1:hidden}', '${2:edit_form}', array(
							'id'=>'$2',
							'value' => '${3}',
							'label' => 'Firstname',
							'required' => true,
							'validators' => array(array('regex', false, array('/^[a-z0-9]+/')))));

snippet fl
	$this->_helper->getHelper('FlashMessenger')->addMessage('${1:Changes applied}');

snippet zflash
	$this->_helper->getHelper('FlashMessenger')->addMessage('${1:Changes applied}');

snippet m
	$this->_helper->getHelper('FlashMessenger')->addMessage('${1:Changes applied}');

snippet r
	$this->_redirect($this->getRequest()->getRequestUri());


#Symfony2 snippets

snippet l symfony log
	$this->get('logger')->info("${1}");

snippet sur
	use Symfony\Component\HttpFoundation\Response;

snippet suq
	use Symfony\Component\HttpFoundation\Request;

snippet sctrl
	// src/Acme/${1:Hello}Bundle/Controller/$1Controller.php
	namespace Acme\$1Bundle\Controller;
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;

	class $1Controller extends Controller
	{
		public function indexAction($name)
		{

		}
	}

snippet sr
	return $this->render('Acme{$1:Hello}Bundle:$1:index.html.twig', array('name' => $name));

snippet onetoone
	@ORM\OneToOne(targetEntity="${1:Shipping}")
	@ORM\JoinColumn(name="${2:shipping_id}", referencedColumnName="${3:id}")

snippet onetomany
	@ORM\OneToMany(targetEntity="${1:Category}", mappedBy="parent")

snippet manytoone
	@ORM\ManyToOne(targetEntity="${1:Address}")
	@ORM\JoinColumn(name="address_id", referencedColumnName="id")

snippet manytomany
	@ORM\ManyToMany(targetEntity="Group")

snippet pa
	/**
	 * @Route("/${1:product}")
	 * @Template()
	 */
	public function ${2:index}Action(${3})
	{
		${4://code here...}
	}

snippet pra
	/**
	 * @Route("/${1:product}")
	 * @Template()
	 */
	protected function ${2:index}Action(${3})
	{
		${4://code here...}
	}

snippet sd
	$repository = $this->getDoctrine()->getRepository('TemaApiUserBundle:Client');
	$clients = $repository->findAll();

snippet sdr
	$repository = $this->getDoctrine()->getRepository('TemaApiUserBundle:Client');
	$clients = $repository->findAll();

snippet em
	$em = $this->getDoctrine()->getEntityManager();
	$em->persist(${1});
	$em->flush(${2});

snippet ss
	$session = $this->getRequest()->getSession();

snippet re
	return new Response(${1});

snippet flash
	$session->getFlashBag()->add('notice', 'Product added');

snippet ren
	return $this->render('${1:DriveBroStoreBundle}:${1:Product:index.html.twig}', array('products' => $products));

snippet not Route notation
	@Route("/${1:product}/${2:show}/{id}/", requirements={"id" = "\d+"}, defaults={"id" = 1} )
snippet not Template notation
	@Template()

snippet za
	Zend_Auth::getInstance()->hasIdentity()
snippet zauth
	Zend_Auth::getInstance()->hasIdentity()

snippet one symfony2 get single object from doctrine repository
	${1:product} = $this->getDoctrine()->getRepository('${2:DriveBroStoreBundle}:${3:Product}')->findOne($id);

snippet fone
	${1:product} = $this->getDoctrine()->getRepository('${2:DriveBroStoreBundle}:${3:Product}')->findOne($id);

snippet fo
	${1:product} = $this->getDoctrine()->getRepository('${2:DriveBroStoreBundle}:${3:Product}')->findOne($id);
#All users that are 20 years old and have a surname of 'Miller'

snippet dfb
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findBy(4{3:array('age' => 20, 'surname' => 'Miller')});
snippet fb
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findBy(4{3:array('age' => 20, 'surname' => 'Miller')});
snippet by
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findBy(4{3:array('age' => 20, 'surname' => 'Miller')});
snippet findby
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findBy(4{3:array('age' => 20, 'surname' => 'Miller')});
snippet dfob
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findBy(4{3:array('age' => 20, 'surname' => 'Miller')});
snippet fob
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findBy(4{3:array('age' => 20, 'surname' => 'Miller')});
snippet sby find one by column
	${1:user} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findOneBy(${2:Name});
snippet sone find one by name ( column name )
	${1:user} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findOneByName($name);


snippet do
	$users = $this->getDoctrine()->getRepository('MyProject\Domain\User')->findBy(array('age' => 20, 'surname' => 'Miller'));

snippet dall
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findAll();

snippet all
	${1:users} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->findAll();

snippet find find one by primary key
	${1:product} = $this->getDoctrine()->getRepository('${2:MyProject\Domain\User'})->find($id);

snippet find find one by column key id
	${1:product} = $repository->findOneById($id);

snippet rep
	$this->getDoctrine()->getRepository('${2:MyProject\Domain\User'});


snippet zmail
		$msg = '';
		$mail = new Zend_Mail('UTF-8');
		$mail->setFrom('${1}');
		$mail->addTo('vs@webdirect.md');
		$mail->addTo(${2});
		$mail->setSubject('${3}');
		$mail->setBodyText($msg);
		return $mail->send();

snippet db
	$db = Zend_Registry::get('${1:database}');

snippet dq
	$q = $this->getDoctrine()->getEntityManager()->createQuery("select u from MyDomain\Model\User u where u.age >= 20 and u.age <= 30");
	$users = $q->getResult();





snippet red
	$this->_redirect('${1}');

snippet zx
		Zend_Registry::get('xajax')->${1}
snippet join
	join(array('${1:table_alias}'=>'${2:table}'), '${3:joined_table_alias}.${4:key} = $1.${5:key}','$1.${6:what_to_fetch?}')

snippet jj
		$select->from( array('${1}'=>'${2}', '*') )
				->join(array('${3}'=>'${4}'), '$3.${5} = $1.${6}','*')
				->where( '$1.${7}=?', ${8});
		$rs = $select->query()->fetchAll();
snippet try
	try{
		${1}
	}
	catch(\Exception $e){
		throw new \Exception($e->getMessage());
	}
snippet throw
	throw new \Exception("Break point at ".__METHOD__." ".__LINE__);

snippet trans
	$db = Zend_Registry::getInstance()->database;
	$db->beginTransaction();
	try
	{
		// Attempt to execute one or more queries:
		${1}
		// If all succeed, commit the transaction and all changes
		// are committed at once.
		$db->commit();

	}
	catch (Exception $e)
	{
		// If any of the queries failed and threw an exception,
		// we want to roll back the whole transaction, reversing
		// changes made in the transaction, even those that succeeded.
		// Thus all changes are committed together, or none are.
		$db->rollBack();
		throw new Exception( $e );
	}
snippet mod
	<?php
	/**
	* ${1}
	*
	* @uses AppModel
	* @package
	* @version 1.0
	* @author vs@bridge-moldova.md
	*/
	class $1Model extends AppModel
	{
		protected $_name = '${2}';
		protected $_primary = '${3}_id';

		public function __construct($id=false)
		{
			parent::__construct($id);
		}

		/**
		* load
		* return model object
		* @param mixed $id
		* @param mixed $lang
		* @author vs@bridge-moldova.md
		* @return void
		*/
		public function load($id, $lang=false)
		{
			$select = new Zend_Db_Select($this->getAdapter());
			$select->from($this->_name);
			$select->where( $this->_primary.'=?',$id);
			//echo $select->__toString();
			$this->book = $select->query()->fetch();
			if($this->book){
				$this->book_id = $this->book['book_id'];
			}
			//echo $select->assemble();
			return $this;
		}

		/**
		* add
		*
		* @param mixed $data
		* @author vs@bridge-moldova.md
		* @return void
		*/
		public function add( $data )
		{
			foreach($this->fields as $field=>$metadata)
			{
				$insert[$field] = !empty($data[$field]) ? $data[$field] : '';
			}
			$this->insert($insert);
			/**
			* Added by vs Чтв Апр  2 18:14:17 EEST 2009
			* This one works
			* Need to report this bug to Zend community
			*/
			$acc_id = $this->getAdapter()->lastInsertId();
			return $acc_id;
		}
	}
snippet ini
	ini_set("display_errors",1);
	error_reporting(E_ALL | E_NOTICE);
	ini_set("date.timezone", "Europe/Helsinki");
snippet h header(Location)
	header("Location: ${1}");
snippet debugf
	function debug($arr, $comment=false, $display_visible = false, $add_count_if_array = true )
	{
		//$cnf = Zend_Registry::get('cnf');
		if(1){
			if (is_array($arr) AND $add_count_if_array){
				$comment.=" count=".count($arr);
			}

			$r = rand( 1, 9999 );
			if(!$display_visible){
				$display = "display:none;";
			}
			else{
				$display="";
			}
			?>
				<script>
				function toggle_<?=$r?>()
				{
					var obj = document.getElementById('div_<?=$r?>')
						if (obj.style.display=='none')
							obj.style.display='';
						else
							obj.style.display='none';
				}
			</script>
				<div style="border: 1px solid black; font: normal 12px Courier New; color: black; background-color: pink; position: relative; z-index: 1000;">
				<a href="javascript:void(0);" style="color: blue; font: normal 10px Verdana;"onclick="toggle_<?=$r?>();">Show/Hide </a><? echo $comment ?> <br>
				<pre id="div_<?=$r?>" style="border: 1px solid black; <? echo $display; ?>">
				<? print_r( $arr ); ?>
				</pre>
				</div>
				<?
		}
	}

snippet j
	$this->_helper->json(array('content'=>${1:html}, 'error'=>${2:''}));
snippet js JASON zend helper
	$this->_helper->json(array('content'=>${1:html}, 'error'=>${2:''}));
snippet je
	$this->_helper->json(array('content'=>${1:html}, 'error'=>${2:''}));
snippet jh
	$this->view->headScript()->appendFile( $this->view->baseUrl() . 'javascript/${1}.js' );
snippet hj
	$this->_helper->json(array('content'=>${1:html}, 'error'=>${2:''}));

snippet cache
		$cache = Zend_Registry::get('${1}');
		$cache_id = '${2}';
		if ( !($rs = $cache->load( $cache_id )) ){
			// expensive query
			// $rs = ...
			$cache->save( $rs,	$cache_id );
		}
		echo $rs;
snippet mail
		mail('${1:vs@webdirect.md}', '${2:Subject}', '${3:Message}');

# Html snippets for symfony php templates
snippet pp
	<?php ${1} ?>
snippet nbs
	&nbsp;
# ←
snippet left
	&#x2190;
# →
snippet right
	&#x2192;
# ↑
snippet up
	&#x2191;
# ↓
snippet down
	&#x2193;
# ↩
snippet return
	&#x21A9;
# ⇤
snippet backtab
	&#x21E4;
# ⇥
snippet shift
	&#x21E7;
# ⌃
snippet control
	&#x2303;
# ⌅
snippet enter
	&#x2305;
# ⌘
snippet command
	&#x2318;
# ⌥
snippet option
	&#x2325;
# ⌦
snippet delete
	&#x2326;
# ⌫
snippet backspace
	&#x232B;
# ⎋
snippet escape
	&#x238B;
# Generic Doctype
snippet doctype HTML 4.01 Strict
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
snippet doctype HTML 4.01 Transitional
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""
	"http://www.w3.org/TR/html4/loose.dtd">
snippet doctype HTML 5
	<!DOCTYPE HTML>
snippet doctype XHTML 1.0 Frameset
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Strict
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
snippet doctype XHTML 1.0 Transitional
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
snippet doctype XHTML 1.1
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
# HTML Doctype 4.01 Strict
snippet docts
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""
	"http://www.w3.org/TR/html4/strict.dtd">
# HTML Doctype 4.01 Transitional
snippet doct
	<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""
	"http://www.w3.org/TR/html4/loose.dtd">
# HTML Doctype 5
snippet doct5
	<!DOCTYPE HTML>
# XHTML Doctype 1.0 Frameset
snippet docxf
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
# XHTML Doctype 1.0 Strict
snippet docxs
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# XHTML Doctype 1.0 Transitional
snippet docxt
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
# XHTML Doctype 1.1
snippet docx
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
snippet html
	<html>
	${1}
	</html>
snippet xhtml
	<html xmlns="http://www.w3.org/1999/xhtml">
	${1}
	</html>
snippet title
	<title>${1:`substitute(Filename("", "Page Title"), "^.", "u&", "")`}</title>${2}

snippet js javascript tag
	<script type="text/javascript" charset="utf-8" language="javascript">
		${1}
	</script>${2}
snippet script
	<script type="text/javascript" charset="utf-8" language="javascript">
		${1}
	</script>${2}
snippet scriptsrc
	<script src="${1}.js" type="text/javascript" charset="utf-8"></script>${2}
snippet css
	<style type="text/css" media="${1:screen}">
		${2}
	</style>${3}
snippet style
	<style type="text/css" media="${1:screen}">
		${2}
	</style>${3}
snippet base
	<base href="${1}" target="${2}">
snippet fieldset
	<fieldset id="$1">
		<legend>${1:name}</legend>

		${3}
	</fieldset>
snippet form html form tag
	<form action="${1:`Filename('$1_submit')`}" method="${2:GET:POST}" accept-charset="utf-8">
		${3}

snippet frm
	<form action="${1:`Filename('$1_submit')`}" method="${2:GET:POST}" accept-charset="utf-8">
		${3}
snippet enctype
	enctype="$1:multipart/form-data"
snippet h1
	<h1 id="${1:heading}">${2:$1}</h1>
snippet input
	<input type="${1:text/submit/hidden/button}" name="${2:some_name}" id="$2" value="${3}">${4}
snippet inp html input
	<input type="${1:text/submit/hidden/button}" name="${2:some_name}" id="$2" value="${3}">${4}
snippet i html input
	<input type="${1:text/submit/hidden/button}" name="${2}" value="${3}" id="$2">${4}
snippet label
	<label for="${2:$1}">${1:name}</label><input type="${3:text/submit/hidden/button}" name="${4:$2}" value="${5}" id="${6:$2}">${7}
snippet link
	<link rel="${1:stylesheet}" href="${2:/css/master.css}" type="text/css" media="${3:screen}" charset="utf-8">${4}
snippet mailto
	<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
snippet meta
	<meta name="${1:name}" content="${2:content}">${3}
snippet opt html option
	<option value="${1:option}">${2:$1}</option>${3}
snippet select
	<select name="${1:some_name}" id="${2:$1}">
		<option value="${3:option}">${4:$3}</option>
	</select>${5}
snippet h head tag
	<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
	<title>${1}</title>
	${1}
	</head>
	${2}
snippet ta
	<textarea name="${1}" rows="${2}" cols="${3}" id="$1">${4}</textarea>
	${5}
snippet textarea
	<textarea name="${1}" rows="${2}" cols="${3}" id="$1">${4}</textarea>
snippet movie
	<object width="${1}" height="${2}"
	classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"
	codebase="http://www.apple.com/qtactivex/qtplugin.cab">
	<param name="src"
	value="${3}" />
	<param name="controller" value="${4}" />
	<param name="autoplay" value="${5}" />
	<embed src="${6}"
	width="${7}" height="${8}"
	controller="${9}" autoplay="${10}"
	scale="tofit" cache="true"
	pluginspage="http://www.apple.com/quicktime/download/"
	/>
	</object>
	${11}
snippet div
	<div id="${1}"${2:" "}>${3}</div>
snippet sp
	<span id="${1}"${2}>
	${3}
	</span>
	${4}
snippet span
	<span id="${1}" class="$1">${2}</span>
snippet table
	<table border="${1:0}" cellpadding="${2:1:0}" cellspacing="${3:1:0}">
	<tr>
		<td>
			${4}
		</td>
	</tr>
	</table>
snippet tbl
	<table border="${1:0}" cellpadding="${2:1:0}" cellspacing="${3:1:0}">
	<tr>
		<td>
			${4}
		</td>
	</tr>
	</table>
snippet tab
	<table border="${1:0}" cellpadding="${2:1:0}" cellspacing="${3:1:0}">
	<tr>
		<td>
			${4}
		</td>
	</tr>
	</table>
snippet tr table tr tag
	<tr>
		<td>
			${1}
		</td>
	</tr>
snippet image
	<img src="${1:/image/}" alt="$2" title="${2}" class="${3}" id="{$4}"/>
snippet img
	<img src="${1:/image/}" alt="$2" title="${2}" class="${3}" id="{$4}"/>
snippet im
	<img src="${1:/image/}" alt="$2" title="${2}" class="${3}" id="{$4}"/>
snippet href
	<a href="${1}">${1}</a>${2}
snippet here
	 <div id="here" style="background: red;height:100px;width: 100px;"></div>
snippet bo
	 style="border: 1px solid red;"
snippet td
	 <td>${1}</td>
snippet a
	<a href="${1}" title="$4" class="${2}" id="${3}">${4}</a>
snippet al
	alert(${1});
snippet cl
	class="${1}"
snippet lit
	{literal}
		${1}
	{/literal}
snippet ajax
	$.ajax({
			type: 'POST',
			url: '${1:/somepage/}',
			data: $(':text, select, textarea, :radio, :hidden',$('form#${2:formid}')).serialize(),
			dataType: 'json',
			complete: response
		});
snippet get
	$.get("${1:/somepage}",${2:false}, ${3:mycallback}, 'json');
	function $3(response)
	{
		${4:alert(response)};
	}

snippet post jquery post
	$.post("${1:test.php}", $("#i${2:formid}").serialize(), ${3:mycallback}, 'json');

snippet jq
	$(function()
	{
		function()
		{
			${1}
		}
	});

snippet vo
	javascript:void(0);
snippet void
	javascript:void(0);
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
snippet f
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}

snippet jf
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
snippet tr ZF template translate
	<?=$this->translate('${1:keyword}')?>
snippet part
	<?=$this->partial('${1:index}.phtml')?>
snippet ou
	<?=$this->output('${1:index}')?>
snippet checked
	$("input[class='layout']:checked").val()
snippet click
	$("${1:#:.}${2:divid:class}").click( function(){
		${3}
	});
snippet each
	$("input[name^='layout_image']").each(function(i){
		layout_images.push(this.value);
	});
snippet co
	console.log(${1:"here"});

snippet cl console log
	console.log(${1:"here"});

snippet ai
	${1:''} => ${2:''},
snippet =
	'${1}' => '${2}',
	${3}
snippet 404
	throw new Zend_Exception('${1:"Page not found"}', 404);
snippet cf
	if($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {
		${2}
		$this->_helper->getHelper('FlashMessenger')->addMessage('Record saved');
		$this->_helper->getHelper('redirector')->goToRoute(array(),'default');
		return;
	}
snippet cp
	if($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {
		${2}
		$this->_helper->getHelper('FlashMessenger')->addMessage('Record saved');
		$this->_helper->getHelper('redirector')->goToRoute(array(),'default');
		return;
	}
snippet ch
	if($this->getRequest()->isPost() && $form->isValid($this->getRequest()->getPost())) {
		${2}
		$this->_helper->getHelper('FlashMessenger')->addMessage('Record saved');
		$this->_helper->getHelper('redirector')->goToRoute(array(),'default');
		return;
	}
snippet u
	$user_id = Zend_Auth::getInstance()->getIdentity()->id;
snippet dojoform
	public function  init()
	{
		$this->loadDefaultDecorators();
		$this->setMethod('POST');
		$submitElement = new Zend_Dojo_Form_Element_SubmitButton('submit');
		$submitElement->setIgnore(true);
		$submitElement->removeDecorator('DtDdWrapper');
		$submitElement->removeDecorator('Label');
		$submitElement->setLabel('${1:"Save item"}');
		$this->addElement($submitElement);

		$cancelElement = new Zend_Dojo_Form_Element_Button('cancel');
		$cancelElement->setIgnore(true);
		$cancelElement->removeDecorator('DtDdWrapper');
		$cancelElement->removeDecorator('Label');
		$cancelElement->setLabel('Cancel');

		$this->addElement($cancelElement);

		$this->addDisplayGroup( array('cancel','submit',), 'toolbarGroup');
		$this->getDisplayGroup('toolbarGroup')
			 ->setDecorators(array('FormElements',
				 new Slys_Dojo_Form_Decorator_Container('toolbar',array('ContentPane',array('class'=>'toolbarContainer'))),
		));

		$element = new Zend_Dojo_Form_Element_ValidationTextBox('title');
		$element->setLabel('Title:');
		$element->setRequired(true);
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_TextBox('alias');
		$element->setLabel('URL Alias:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_RadioButton('published');
		$element->setLabel('Published:');
		$element->setSeparator('&nbsp;');
		$element->addMultiOption(1, 'Yes');
		$element->addMultiOption(0, 'No');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_NumberSpinner('ordering');
		$element->setMin(1)
				->setMax(1000);
		$element->setLabel('Ordering:');
		$element->setAttrib('style', 'width:50px;');
		$this->addElement($element);

		$this->addDisplayGroup( array('title','alias','published','ordering'), 'topGroup');
		$this->getDisplayGroup('topGroup')
			 ->setDecorators(array(
					'FormElements',
					 new Slys_Dojo_Form_Decorator_Clear(),
					 new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'General parameters',
																  'dijitParams'=>array('open'=>true),'class'=>'property property-long')),
					 new Slys_Dojo_Form_Decorator_Container('center'),
				 ));

		$element = new Zend_Dojo_Form_Element_Editor('description');
		$element->setDijitParam('height', '300');
		$element->setLabel('Description:');
		$this->addElement($element);

		$this->addDisplayGroup( array('description'), 'descriptionGroup');
		$this->getDisplayGroup('descriptionGroup')
			 ->setDecorators(array('FormElements',
					new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'Description','dijitParams'=>array('open'=>true, 'class'=>'property property-new-line'))),
					 new Slys_Dojo_Form_Decorator_Container('center'),
				 ));

		$element = new Zend_Dojo_Form_Element_Editor('text');
		$element->setDijitParam('height', '300');
		$element->setLabel('Full text:');
		$this->addElement($element);

		$this->addDisplayGroup( array('text'), 'textGroup');
		$this->getDisplayGroup('textGroup')
			 ->setDecorators(array('FormElements',
					new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'Content text','dijitParams'=>array('open'=>true, 'class'=>'property property-new-line'))),
					 new Slys_Dojo_Form_Decorator_Container('center',array('ContentPane',array('class'=>'centerContainer'))),
				 ));

		/**
		 * Parent category group
		 */
		$element = new Slys_Dojo_Form_Element_TreeSelect('category_id');
		$element->removeDecorator('Label');
		$element->removeDecorator('HtmlTag');
		$this->addElement($element);

		$this->addDisplayGroup(
			array('category_id'),
			'parentGroup'
		);
		$this->getDisplayGroup('parentGroup')
			 ->setDecorators(
				 array(
					 'FormElements',
					 new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'Category','dijitParams'=>array('open'=>true))),
					 new Slys_Dojo_Form_Decorator_Container('right'),
				));

		$element = new Zend_Dojo_Form_Element_FilteringSelect('author_id');
		$element->setLabel('Author:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_TextBox('author_alias');
		$element->setLabel('Author Alias:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_FilteringSelect('access_role_id');
		$element->setLabel('Access Level:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_DateTextBox('created');
		$element->setLabel('Created Date:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_DateTextBox('publish_up');
		$element->setLabel('Start Publishing:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_DateTextBox('publish_down');
		$element->setLabel('Finish Publishing:');
		$this->addElement($element);

		$element = new Zend_Dojo_Form_Element_FilteringSelect('commentable');
		$element->setLabel('Allow comments:');
		$element->addMultiOptions(array('0'=>'No','1'=>'Yes'));
		$this->addElement($element);

		$this->addDisplayGroup(
			array('author_id','author_alias','access_role_id','created','publish_up','publish_down','commentable'),
			'basicGroup'
		);

		$this->getDisplayGroup('basicGroup')
			 ->setDecorators(
				 array(
					 'FormElements',
					 new Slys_Dojo_Form_Decorator_Clear(),
					 new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'Parameters','class'=>'property')),
					 new Slys_Dojo_Form_Decorator_Container('right'),
				));

		$answers = array('Inherited','0'=>'No','2'=>'Yes');
		$subform = new Content_Form_Category_Attribs($answers);
		$subform->setDecorators(array(
					'FormElements',
					'HtmlTag',
					 new Slys_Dojo_Form_Decorator_Clear(),
					 new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'Show attributes','class'=>'property')),
					 new Slys_Dojo_Form_Decorator_Container('right'),
				));
		$this->addSubForm($subform, 'attribs');

		$subform = new Content_Form_Category_Metadata();
		$subform->setDecorators(array(
					'FormElements',
					'HtmlTag',
					 new Slys_Dojo_Form_Decorator_Clear(),
					 new Slys_Dojo_Form_Decorator_TitlePane(array('title'=>'Meta Information','class'=>'property')),
					 new Slys_Dojo_Form_Decorator_Container('right', array('ContentPane',array('class'=>'rightContainer','style'=>'width:300px;'))),
				));
		$this->addSubForm($subform, 'metadata');
	}
snippet route
	$this->_helper->getHelper('redirector')->goToRoute(array(
														 'module' => 'ad',
														 'controller' => 'vacancy',
														 'action' => 'register',
														 'id' => $type->id
														), 'default', true);

snippet dec
	$element->addDecorator('HtmlTag', array('tag'=>'div', 'class'=>'input'));
	$element->addDecorator('label', array('tag'=>'div', 'class'=>'input'));
snippet decf
	$this->setDecorators(array( 'FormElements',
									array('HtmlTag', array('tag' => 'div', 'class' => 'form')), 'DijitForm'));
snippet ispost
	if ( $this->getRequest()->isPost() ) {
		${1}
	}

snippet isp
	if ( $this->getRequest()->isPost() ) {
		${1}
	}
snippet post Zend_Request get POST vars
	$this->getRequest()->getPost()

snippet gcd
	$cd = realpath(dirname(__FILE__));
snippet cwd
	$cd = realpath(dirname(__FILE__));
snippet cd
	$cd = realpath(dirname(__FILE__));




#unittest snippets

snippet reset
	$this->resetRequest()
		->resetResponse();
	${1}
snippet set
	$this->request->setMethod('GET')
	->setPost(array(
					'${1:id}' => '1',
					'${2:date}' => '2011-02-03'
					));
snippet err use in unit test
	$this->assertNotController('error');
	$this->assertNotAction('error');
snippet b
	var_dump($this->getResponse()->getBody());
	${1}
snippet body
	var_dump($this->getResponse()->getBody());
	${1}
snippet headers
	var_dump($this->getResponse()->getHeaders());
	${1}

snippet deb debug func
	debug( $${1}, "Debug  ".__METHOD__." on line ".__LINE__ );
	die( 'Break point : '.__METHOD__.' on line '.__LINE__ );
snippet d
	echo "<pre>";
	print_r($${1:this->getRequest()->getParams()});
	echo "</pre>";
	die( 'Break point : '.__METHOD__.' on line '.__LINE__ );
snippet pre
	echo "<pre>";
	${1}
	echo "</pre>";

snippet s
	$this->markTestSkipped('${1}');

snippet skip
	$this->markTestSkipped('${1}');

snippet zdtree
	$treeObject = Product_Model_DbTable_Category::getInstance()->getTree();
snippet zdone
	return Product_Model_DbTable_Category::getInstance()->findOneBy('id', $id);
snippet zdl
	return Product_Model_DbTable_Category::getInstance()->findAll();
snippet zdlist
	return Product_Model_DbTable_Category::getInstance()->findAll();
snippet zdall
	return Product_Model_DbTable_Category::getInstance()->findAll();
snippet zdfind
	return Product_Model_DbTable_Category::getInstance()->findOneBy('sysname', $sysname);
	$favorites = Product_Model_DbTable_Favorite::getInstance()->findBy('user_id', $identity->id);

snippet ad ZF get default database adapter
	Zend_Db_Table::getDefaultAdapter();
snippet ga ZF get default database adapter
	Zend_Db_Table::getDefaultAdapter();
snippet adapter ZF get default database adapter
	Zend_Db_Table::getDefaultAdapter();
snippet curl
	curl_setopt ($ch, CURLOPT_URL, $url);
	curl_setopt ($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6");
	curl_setopt ($ch, CURLOPT_TIMEOUT, 60);
	curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
	$result = curl_exec ($ch);
	curl_close($ch);
snippet ef
	$str = <<<EOF
	<p>Hello</p>
	EOF;

snippet eof
	$str = <<<EOF
	<p>Hello</p>
	EOF;
snippet back
	$backtrace = debug_backtrace();
	echo "<pre>";
	print_r($backtrace);
	echo "</pre>";
	die( 'Break point : '.__METHOD__.' on line '.__LINE__ );

snippet dd
	\Doctrine\Common\Util\Debug::dump($${1:entity});
	throw new \Exception("break point at ".__METHOD__." ".__LINE__);

