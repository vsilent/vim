snippet main
	if __name__ == '__main__':
		${1}
snippet #
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-


snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet d
	logging.debug(" dumped: %s ", ${1})
snippet concat
	return ''.join([`num` for num in xrange(loop_count)])
snippet con
	${1} = ${2}.append('${3}')
snippet e
	import sys
	sys.exit(${1:0})

snippet rd
	for filename in os.listdir('${1:/some/dir/}'):
		print filename

snippet readdir
	for filename in os.listdir('${1:/some/dir/}'):
		print filename
snippet class
	class ${1:MyClass}:
		"""class $1"""
		def __str__(self):
			return '$1'

		def __init__(self):
			pass
snippet logging
	import logging
	logging.basicConfig(level=logging.DEBUG)
snippet l
	logging.info(${1:here})
snippet ld
	logging.debug(${1:here})
snippet le
	logging.exception(e)

snippet proc
	proc = subprocess.Popen(
		["python", "%srobot/core/lib/jabber/connect.py" % settings.HOME_DIR]
		,shell=False
		,stdin=subprocess.PIPE
		,stdout=subprocess.PIPE
		,stderr=subprocess.PIPE
	)

	logging.info('Start subprocess...')
	stdoutdata, stderrdata = proc.communicate()

snippet sub
	proc = subprocess.Popen(
		["python", "%srobot/core/lib/jabber/connect.py" % settings.HOME_DIR]
		,shell=False
		,stdin=subprocess.PIPE
		,stdout=subprocess.PIPE
		,stderr=subprocess.PIPE
	)

		logging.info('Start subprocess...')
		stdoutdata, stderrdata = proc.communicate()
snippet pipe
	from multiprocessing import Process, Pipe
	self.this_server, brain_jabber_listener = Pipe()
	self.jproc = Process( target=jabber_listener, args=( brain_jabber_listener, ) )
	self.jproc.start()

snippet time
	from datetime import datetime
	registered = datetime.now()
snippet date
	from datetime import datetime
	registered = datetime.now()
snippet datetime
	from datetime import datetime
	registered = datetime.now()

